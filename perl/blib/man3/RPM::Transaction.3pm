.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RPM::Transaction 3"
.TH RPM::Transaction 3 "2010-11-21" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RPM::Transaction
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "new"
.IX Subsection "new"
Create a new RPM::Transaction.
.ie n .SS "$ts\->setrootdir"
.el .SS "\f(CW$ts\fP\->setrootdir"
.IX Subsection "$ts->setrootdir"
Set the root path for the transaction. Should be called before any action.
.ie n .SS "$ts\->vsflags"
.el .SS "\f(CW$ts\fP\->vsflags"
.IX Subsection "$ts->vsflags"
Return the current vsflags set in the transaction.
.PP
An optionnal vsflags can be passed, in this case the new vsflags is set,
old value is returned:
.PP
.Vb 5
\&    $ts\->vsflag(4);
\&    my $oldflags = $ts\->vsflag(6);
\&    # $oldflags contains 6
\&    my $flags = $ts\->vsflag();
\&    # $flags contains 6
.Ve
.ie n .SS "$ts\->transflags"
.el .SS "\f(CW$ts\fP\->transflags"
.IX Subsection "$ts->transflags"
Return the current transflags set in the transaction.
.PP
An optionnal transflags can be passed, in this case the new transflags is set,
old value is returned:
.PP
.Vb 5
\&    $ts\->transflag(4);
\&    my $oldflags = $ts\->transflag(6);
\&    # $oldflags contains 6
\&    my $flags = $ts\->transflag();
\&    # $flags contains 6
.Ve
.ie n .SS "$ts\->packageiterator"
.el .SS "\f(CW$ts\fP\->packageiterator"
.IX Subsection "$ts->packageiterator"
Return a RPM::PackageIterator against rpmdb use in the transaction.
.PP
See RPM::PackageIterator
.ie n .SS "$ts\->add_install($header, $key, $upgrade)"
.el .SS "\f(CW$ts\fP\->add_install($header, \f(CW$key\fP, \f(CW$upgrade\fP)"
.IX Subsection "$ts->add_install($header, $key, $upgrade)"
Add a new package to install into the transaction.
.ie n .IP "$header is the RPM::Header from the rpm to add" 4
.el .IP "\f(CW$header\fR is the RPM::Header from the rpm to add" 4
.IX Item "$header is the RPM::Header from the rpm to add"
.PD 0
.ie n .IP "$key an arbitrary value that can be set to identify the element" 4
.el .IP "\f(CW$key\fR an arbitrary value that can be set to identify the element" 4
.IX Item "$key an arbitrary value that can be set to identify the element"
.ie n .IP "$upgrade: (optional, default to 1) the package will upgrade already installed packages." 4
.el .IP "\f(CW$upgrade:\fR (optional, default to 1) the package will upgrade already installed packages." 4
.IX Item "$upgrade: (optional, default to 1) the package will upgrade already installed packages."
.PD
.ie n .SS "$ts\->add_delete($header, $offset)"
.el .SS "\f(CW$ts\fP\->add_delete($header, \f(CW$offset\fP)"
.IX Subsection "$ts->add_delete($header, $offset)"
Add a package to remove from transaction
.ie n .IP "$header is the RPM::Header of the rpm to uninstall" 4
.el .IP "\f(CW$header\fR is the RPM::Header of the rpm to uninstall" 4
.IX Item "$header is the RPM::Header of the rpm to uninstall"
.PD 0
.ie n .IP "$offset is the db location of the rpm to uninstall" 4
.el .IP "\f(CW$offset\fR is the db location of the rpm to uninstall" 4
.IX Item "$offset is the db location of the rpm to uninstall"
.PD
.ie n .SS "$ts\->\fIelement_count()\fP"
.el .SS "\f(CW$ts\fP\->\fIelement_count()\fP"
.IX Subsection "$ts->element_count()"
Return the count of element in transaction.
.ie n .SS "$ts\->\fIcheck()\fP"
.el .SS "\f(CW$ts\fP\->\fIcheck()\fP"
.IX Subsection "$ts->check()"
Check the transaction as no problem, return True on success.
.ie n .SS "$ts\->\fIproblems()\fP"
.el .SS "\f(CW$ts\fP\->\fIproblems()\fP"
.IX Subsection "$ts->problems()"
Return a RPM::Problems object if any.
.ie n .SS "$ts\->\fIorder()\fP"
.el .SS "\f(CW$ts\fP\->\fIorder()\fP"
.IX Subsection "$ts->order()"
Order the transaction, return True on success.
.PP
Return as second value the count of unordered element:
.PP
.Vb 1
\&    my $result = $ts\->order();
.Ve
.PP
or
.PP
.Vb 1
\&    my ($result, $unordered) = $ts\->order();
.Ve
.ie n .SS "$ts\->\fIrun()\fP"
.el .SS "\f(CW$ts\fP\->\fIrun()\fP"
.IX Subsection "$ts->run()"
Run the transaction, aka install/uninstall pkg.
.ie n .SS "$ts\->dbadd($header)"
.el .SS "\f(CW$ts\fP\->dbadd($header)"
.IX Subsection "$ts->dbadd($header)"
Inject a RPM::Header into the rpmdb.
.ie n .SS "$ts\->dbremove($offset)"
.el .SS "\f(CW$ts\fP\->dbremove($offset)"
.IX Subsection "$ts->dbremove($offset)"
Remove the header at \fB\f(CB$offset\fB\fR from the rpmdb.
.ie n .SS "$ts\->opendb($write)"
.el .SS "\f(CW$ts\fP\->opendb($write)"
.IX Subsection "$ts->opendb($write)"
Open the rpmdatabase attached to the transaction, if \f(CW$write\fR is true, in write mode
.PP
Normally this is not need, rpmdb is automatically open when need.
.PP
Be careful: If an rpmdb is open'ed manually, that disables lazy opens, so you'll to close
it manually.
.ie n .SS "$ts\->closedb"
.el .SS "\f(CW$ts\fP\->closedb"
.IX Subsection "$ts->closedb"
Close the rpmdb attached to transaction.
.PP
Normally this is not need, rpmdb is automatically closed after each operation.
.ie n .SS "$ts\->initdb($write)"
.el .SS "\f(CW$ts\fP\->initdb($write)"
.IX Subsection "$ts->initdb($write)"
Create and open the rpmdb attaced to transaction, see opendb.
.ie n .SS "$ts\->verifydb"
.el .SS "\f(CW$ts\fP\->verifydb"
.IX Subsection "$ts->verifydb"
Verify the rpmdb.
.ie n .SS "$ts\->rebuilddb"
.el .SS "\f(CW$ts\fP\->rebuilddb"
.IX Subsection "$ts->rebuilddb"
Rebuild the rpmdb.
.ie n .SS "$ts\->readheader"
.el .SS "\f(CW$ts\fP\->readheader"
.IX Subsection "$ts->readheader"
Read a rpm and return a RPM::Header object
.ie n .SS "$ts\->importpubkey"
.el .SS "\f(CW$ts\fP\->importpubkey"
.IX Subsection "$ts->importpubkey"
Import public key.
.ie n .SS "$ts\->checkrpm"
.el .SS "\f(CW$ts\fP\->checkrpm"
.IX Subsection "$ts->checkrpm"
Check rpm..? (\s-1FIXME\s0)
