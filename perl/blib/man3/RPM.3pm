.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RPM 3"
.TH RPM 3 "2010-11-21" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RPM \- Perl bindings for the RPM Package Manager API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use RPM;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1RPM\s0 module provides an object-oriented interface to querying both
the installed \s-1RPM\s0 database as well as files on the filesystem.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "installsrpm($filename)"
.IX Subsection "installsrpm($filename)"
Install a source rpm and return spec file path and its cookies.
Returns undef if install is impossible.
.PP
see RPM::Spec\->\fInew()\fR for more information about cookies.
.SS "\s-1GENERICS\s0 \s-1FUNCTIONS\s0"
.IX Subsection "GENERICS FUNCTIONS"
\fIrpmversion\fR
.IX Subsection "rpmversion"
.PP
Return the rpm version which is also the module version:
.PP
.Vb 1
\&    RPM::rpmversion(); # return 5.0.DEVEL currently ;)
.Ve
.SS "\s-1MACROS\s0 \s-1FUNCTIONS\s0"
.IX Subsection "MACROS FUNCTIONS"
\fIexpand_macro($string)\fR
.IX Subsection "expand_macro($string)"
.PP
Return the string after macros expansion:
.PP
.Vb 3
\&    expand_macro(\*(Aq%_dbpath\*(Aq); # will return \*(Aq/var/lib/rpm\*(Aq on most system,
\&                              # depending of your config
\&    expand_macro(\*(Aq%{?_dbpath:is set}\*(Aq); # will return is set, normally... :)
.Ve
.PP
\fIadd_macro($string)\fR
.IX Subsection "add_macro($string)"
.PP
Set or overide a macro, the format to use is the macro name (w/o %) follow
by its definition:
.PP
.Vb 2
\&    add_macro(\*(Aq_anymacros anyvalue\*(Aq);
\&    print expand_macro(\*(Aq%_anymacros\*(Aq); # show \*(Aqanyvalue\*(Aq
.Ve
.PP
\fIdelete_macro($macro)\fR
.IX Subsection "delete_macro($macro)"
.PP
Delete a macro definition:
.PP
.Vb 1
\&    delete_macro(\*(Aq_anymacros\*(Aq);
.Ve
.PP
\fIdump_macros($handle)\fR
.IX Subsection "dump_macros($handle)"
.PP
Dump macros all macros currently defined into \f(CW$handle\fR. If \f(CW$handle\fR is missing,
\&\s-1STDOUT\s0 is used.
.PP
\fIload_macro_file($file)\fR
.IX Subsection "load_macro_file($file)"
.PP
Load a macro file.
.PP
\fIreset_macros\fR
.IX Subsection "reset_macros"
.PP
Reset all macros to default config (aka from rpm configuration).
.SS "\s-1PLATFORM\s0 \s-1FUNCTIONS\s0"
.IX Subsection "PLATFORM FUNCTIONS"
\fIsetverbosity($verbosity)\fR
.IX Subsection "setverbosity($verbosity)"
.PP
Set the global verbosity of rpmlib.
.PP
\fIrpmvercmp($verA, \f(CI$verB\fI)\fR
.IX Subsection "rpmvercmp($verA, $verB)"
.PP
Compare two version (or release, not both) and return:
  * \-1 verA < verB
  *  0 verA = verB
  *  1 verA > verB
.PP
.Vb 3
\&    rpmvercmp(\*(Aq1\*(Aq, \*(Aq1.1\*(Aq); # return 1
\&    # This works but will not give the expected result:
\&    rpmvercmp(\*(Aq1\-1\*(Aq, \*(Aq1.1\-2\*(Aq) # return \-1
.Ve
.PP
\fIplatformscore($platform)\fR
.IX Subsection "platformscore($platform)"
.PP
Return the score of platform according your rpm configuration,
0 if not compatible.
.PP
.Vb 5
\&    # on x86_64 under Mandriva Linux:
\&    platformscore("i586\-mandriva\-linux\-gnu");
\&    # return 8 here
\&    platformscore("ppc\-mandriva\-linux\-gnu");
\&    # return 0
.Ve
.SS "\s-1LOG\s0 \s-1AND\s0 \s-1VERBOSITY\s0 \s-1FUNCTIONS\s0"
.IX Subsection "LOG AND VERBOSITY FUNCTIONS"
\fIlastlogmsg\fR
.IX Subsection "lastlogmsg"
.PP
Return the last message give by rpm. In array context return both
the erreur level and message:
.PP
.Vb 2
\&    my $message = rpmlog();
\&    my ($code, $message) = rpmlog();
.Ve
.PP
\fIrpmlog($err_level, \f(CI$message\fI)\fR
.IX Subsection "rpmlog($err_level, $message)"
.PP
Log a message using rpm \s-1API\s0.
.PP
\fIsetlogcallback\fR
.IX Subsection "setlogcallback"
.PP
\&\s-1DEPRECATED\s0 ?
.PP
\fIsetlogfile\fR
.IX Subsection "setlogfile"
.PP
\&\s-1DEPRECATED\s0 ?
.SH "TODO"
.IX Header "TODO"
Make package installation and removal better (\-;.
.PP
Signature validation.
.SS "resign Resign a package."
.IX Subsection "resign Resign a package."
.SH "HISTORY"
.IX Header "HISTORY"
.IP "0.5" 8
.IX Item "0.5"
Massive Rework:
.IP "0.01" 8
.IX Item "0.01"
Initial release
.SH "AUTHOR"
.IX Header "AUTHOR"
Olivier Thauvin <nanardon@rpm5.org>
.PP
Original author:
.PP
Chip Turner <cturner@redhat.com>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl.
RPM::Header
RPM::PackageIterator
RPM::Transaction
RPM::Constant
RPM::Files
RPM::Dependencies
