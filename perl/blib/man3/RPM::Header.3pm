.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RPM::Header 3"
.TH RPM::Header 3 "2007-08-14" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RPM::Header
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A module to perform action on rpm b<header>.
.PP
The header is a set of data containing information about a rpm archive.
.SH "SINOPSYS"
.IX Header "SINOPSYS"
.Vb 1
\&    use RPM::Header;
\&
\&    my $header = rpm2header(\*(Aqany\-1\-1.noarch.rpm\*(Aq);
\&    print $header\->header_sprintf(\*(Aq%{NAME}\en\*(Aq);
\&    # output "any" + carriage return
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "rpm2header(rpmfile, vsflags)"
.IX Subsection "rpm2header(rpmfile, vsflags)"
Read a rpm archive and return a RPM::Header object on success, return undef
on error.
.PP
\&\fBvsflags\fR (optional) is either an integer value, either an arrayref
containing textual values. See RPM::Constant.
.SS "stream2header(filehandle)"
.IX Subsection "stream2header(filehandle)"
Read all header store into a file from an open file handle.
.PP
Two usage:
.IP "stream2header(filehandle)" 4
.IX Item "stream2header(filehandle)"
stream2header return an array b<RPM::Header> object.
.ie n .IP "stream2header(filehandle, $callback)" 4
.el .IP "stream2header(filehandle, \f(CW$callback\fR)" 4
.IX Item "stream2header(filehandle, $callback)"
The function nothing, for each header read, \f(CW$callback\fR function is called
with 'RPM::Header' passed as argument.
.SH "RPM::Header FUNCTIONS"
.IX Header "RPM::Header FUNCTIONS"
In addition to the following methods, all tags have simple accessors;
\&\f(CW$hdr\fR\->\fIepoch()\fR is equivalent to \f(CW$hdr\fR\->tag('epoch').
.PP
The <=> and cmp operators can be used to compare versions of two packages.
.ie n .SS "$hdr\->listtag"
.el .SS "\f(CW$hdr\fP\->listtag"
.IX Subsection "$hdr->listtag"
Return an array listing all tag set into the header.
.ie n .SS "$hdr\->hastag($tag)"
.el .SS "\f(CW$hdr\fP\->hastag($tag)"
.IX Subsection "$hdr->hastag($tag)"
Return True is \fB\f(CB$tag\fB\fR is set into the header.
.PP
\&\fB\f(CB$tag\fB\fR can be either the tagname, either the internal numeric value.
.ie n .SS "$hdr\->tagformat($format)"
.el .SS "\f(CW$hdr\fP\->tagformat($format)"
.IX Subsection "$hdr->tagformat($format)"
Return a format string from header like rpm \-\-qf.
.ie n .SS "$hdr\->tag($tag)"
.el .SS "\f(CW$hdr\fP\->tag($tag)"
.IX Subsection "$hdr->tag($tag)"
Return tag content from the header, undef if tag is not set.
.PP
\&\fB\f(CB$tag\fB\fR can be either the tagname, either the internal numeric value.
.ie n .SS "$hdr\->tagtype($tag)"
.el .SS "\f(CW$hdr\fP\->tagtype($tag)"
.IX Subsection "$hdr->tagtype($tag)"
Return the tag type from the header, undef if tag is not set.
.PP
\&\fB\f(CB$tag\fB\fR can be either the tagname, either the internal numeric value.
.ie n .SS "$hdr\->removetag($tag)"
.el .SS "\f(CW$hdr\fP\->removetag($tag)"
.IX Subsection "$hdr->removetag($tag)"
Remove the tag from header.
.ie n .SS "$hdr\->addtag($tag, $tagtype, @value)"
.el .SS "\f(CW$hdr\fP\->addtag($tag, \f(CW$tagtype\fP, \f(CW@value\fP)"
.IX Subsection "$hdr->addtag($tag, $tagtype, @value)"
Add a tag to the header.
.ie n .SS "$hdr\->compare($header)"
.el .SS "\f(CW$hdr\fP\->compare($header)"
.IX Subsection "$hdr->compare($header)"
Compare two header.
.ie n .SS "$hdr\->\fIis_source_package()\fP"
.el .SS "\f(CW$hdr\fP\->\fIis_source_package()\fP"
.IX Subsection "$hdr->is_source_package()"
Returns a true value if the package is a source package, false otherwise.
.ie n .SS "$hdr\->copy"
.el .SS "\f(CW$hdr\fP\->copy"
.IX Subsection "$hdr->copy"
Return a \fBRPM::Header\fR copy of the header.
.ie n .SS "$hdr\->hsize"
.el .SS "\f(CW$hdr\fP\->hsize"
.IX Subsection "$hdr->hsize"
Return the size in byte of the header in it on disk rpresentation.
.ie n .SS "$hdr\->string"
.el .SS "\f(CW$hdr\fP\->string"
.IX Subsection "$hdr->string"
Return a in memory string representation of \f(CW$hdr\fR
.ie n .SS "$hdr\->write($handle)"
.el .SS "\f(CW$hdr\fP\->write($handle)"
.IX Subsection "$hdr->write($handle)"
Dump header into open file handle \fB\f(CB$handle\fB\fR.
.ie n .SS "$hdr\->changelog"
.el .SS "\f(CW$hdr\fP\->changelog"
.IX Subsection "$hdr->changelog"
Returns a list of hash refs containing the change log data of the package.
The hash keys represent individual change log entries, and their keys are:
\&\f(CW\*(C`time\*(C'\fR (the time of the changelog entry), \f(CW\*(C`name\*(C'\fR (the \*(L"name\*(R", ie. often
the email address of the author of the entry), and \f(CW\*(C`text\*(C'\fR (the text of the
entry).
.ie n .SS "$hdr\->as_nvre"
.el .SS "\f(CW$hdr\fP\->as_nvre"
.IX Subsection "$hdr->as_nvre"
Returns a string formatted like:
.PP
.Vb 1
\&   epoch:name\-version\-release
.Ve
.PP
If epoch is undefined for this package, it and the leading colon are omitted.
.ie n .SS "$hdr\->dependencies($tag)"
.el .SS "\f(CW$hdr\fP\->dependencies($tag)"
.IX Subsection "$hdr->dependencies($tag)"
Create a new RPM::Dependencies object from RPM::Header \fB\f(CB$hdr\fB\fR.
.PP
\&\fB\f(CB$tag\fB\fR is either \s-1PROVIDENAME\s0, \s-1REQUIRENAME\s0, \s-1CONFLICTNAME\s0, \s-1OBSOLETENAME\s0
or \s-1TRIGGERNAME\s0.
.ie n .SS "$hdr\->\fIfiles()\fP"
.el .SS "\f(CW$hdr\fP\->\fIfiles()\fP"
.IX Subsection "$hdr->files()"
Return a RPM::Files object from \fBRPM::Header\fR \f(CW$hdr\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Olivier Thauvin <nanardon@nanardon.zarb.org>
